// # C·∫•u h√¨nh push notification
// src/config/push-notifications.ts
import dotenv from 'dotenv';
import webpush from 'web-push';

dotenv.config();

export interface PushVapidKeys {
  publicKey: string;
  privateKey: string;
}

export interface NotificationTemplate {
  title: string;
  body: string;
  icon?: string;
  badge?: string;
  actions?: {
    action: string;
    title: string;
  }[];
}

export interface PushNotificationConfig {
  vapidKeys: PushVapidKeys;
  subject: string;
  defaultOptions: {
    TTL: number;
    urgency: 'very-low' | 'low' | 'normal' | 'high';
  };
  notificationTypes: Record<string, string>;
  templates: Record<string, NotificationTemplate>;
  schedulingConfig: {
    packageExpiryNotificationDays: number[];
    appointmentReminderHours: number[];
  };
}

// VAPID & Web Push setup
export const pushConfig: PushNotificationConfig = {
  vapidKeys: {
    publicKey: process.env.VAPID_PUBLIC_KEY || '',
    privateKey: process.env.VAPID_PRIVATE_KEY || '',
  },
  subject: process.env.VAPID_SUBJECT || 'mailto:support@gymapp.com',
  defaultOptions: {
    TTL: 86400, // 24h
    urgency: 'normal',
  },

  notificationTypes: {
    PACKAGE_EXPIRY: 'package_expiry',
    NEW_PROMOTION: 'new_promotion',
    APPOINTMENT_REMINDER: 'appointment_reminder',
    SCHEDULE_UPDATE: 'schedule_update',
    PAYMENT_CONFIRMATION: 'payment_confirmation',
  },

  templates: {
    package_expiry: {
      title: 'üèãÔ∏è G√≥i t·∫≠p s·∫Øp h·∫øt h·∫°n',
      body: 'G√≥i t·∫≠p {{packageName}} s·∫Ω h·∫øt h·∫°n v√†o ng√†y {{expiryDate}}. Gia h·∫°n ngay ƒë·ªÉ kh√¥ng gi√°n ƒëo·∫°n luy·ªán t·∫≠p!',
      icon: '/icons/membership-icon.png',
      badge: '/icons/badge-icon.png',
      actions: [
        { action: 'renew-package', title: 'Gia h·∫°n ngay' },
        { action: 'view-packages', title: 'Xem g√≥i t·∫≠p' },
      ],
    },
    appointment_reminder: {
      title: 'üìÖ Nh·∫Øc nh·ªü l·ªãch h·∫πn',
      body: 'B·∫°n c√≥ l·ªãch h·∫πn v·ªõi PT {{trainerName}} l√∫c {{time}} ng√†y {{date}}.',
      icon: '/icons/appointment-icon.png',
      badge: '/icons/badge-icon.png',
      actions: [
        { action: 'view-appointment', title: 'Xem chi ti·∫øt' },
        { action: 'reschedule', title: 'ƒê·ªïi l·ªãch' },
      ],
    },
    new_promotion: {
      title: 'üéâ Khuy·∫øn m√£i ƒë·∫∑c bi·ªát',
      body: 'Gi·∫£m gi√° {{discount}}% cho t·∫•t c·∫£ g√≥i t·∫≠p! √Åp d·ª•ng ƒë·∫øn {{endDate}}.',
      icon: '/icons/promotion-icon.png',
      badge: '/icons/badge-icon.png',
      actions: [
        { action: 'view-promotions', title: 'Xem khuy·∫øn m√£i' },
      ],
    },
    workout_reminder: {
      title: 'üí™ ƒê·∫øn gi·ªù t·∫≠p r·ªìi!',
      body: 'L·ªãch t·∫≠p {{workoutType}} c·ªßa b·∫°n s·∫Øp b·∫Øt ƒë·∫ßu. ƒê√£ s·∫µn s√†ng ch∆∞a?',
      icon: '/icons/workout-icon.png',
      badge: '/icons/badge-icon.png',
    },
    payment_success: {
      title: '‚úÖ Thanh to√°n th√†nh c√¥ng',
      body: 'B·∫°n ƒë√£ thanh to√°n th√†nh c√¥ng {{amount}}ƒë cho {{packageName}}',
      icon: '/icons/payment-icon.png',
      badge: '/icons/badge-icon.png',
    },
     system: {
      title: 'üîî Th√¥ng b√°o h·ªá th·ªëng',
      body: '{{message}}',
      icon: '/icons/system-icon.png',
      badge: '/icons/badge-icon.png',
    }
  },

  schedulingConfig: {
    packageExpiryNotificationDays: [7, 3, 1],
    appointmentReminderHours: [24, 1],
  },
};

// H√†m kh·ªüi t·∫°o Web Push Service
export const initializePushService = (): boolean => {
  if (!pushConfig.vapidKeys.publicKey || !pushConfig.vapidKeys.privateKey) {
    console.error('‚ùå Missing VAPID keys for push notification setup');
    return false;
  }

  webpush.setVapidDetails(
    pushConfig.subject,
    pushConfig.vapidKeys.publicKey,
    pushConfig.vapidKeys.privateKey
  );



  console.log('‚úÖ Push notification service initialized');
  return true;
};


