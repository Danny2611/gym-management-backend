import { Types } from 'mongoose';
import Membership from '../models/Membership';
import Member from '../models/Member';
import cron from 'node-cron';
import { MembershipDetailsResponse } from '~/types/membership';

//user

//L·∫•y th√¥ng tin chi ti·∫øt c·ªßa h·ªôi vi√™n v√† g√≥i t·∫≠p c√≥ gi√° cao nh·∫•t
const getMembershipDetails = async (
   memberId: string,
): Promise<MembershipDetailsResponse> => {
  try {
    // Convert string ID to ObjectId if needed
    const memberObjectId = typeof memberId === 'string'
      ? new Types.ObjectId(memberId)
      : memberId;

    // L·∫•y th√¥ng tin h·ªôi vi√™n
    const member = await Member.findById(memberObjectId)
      .select('name avatar')
      .lean();

    if (!member) {
      throw new Error('Kh√¥ng t√¨m th·∫•y h·ªôi vi√™n');
    }

    // L·∫•y t·∫•t c·∫£ c√°c g√≥i t·∫≠p active c·ªßa h·ªôi vi√™n
    let memberships = await Membership.find({
      member_id: memberObjectId,
      status: { $in: ['active', 'expired'] }
    })
      .populate({
        path: 'package_id',
        select: 'name price category training_sessions',
      })
      .lean();


    // N·∫øu kh√¥ng c√≥ g√≥i t·∫≠p active, t√¨m g√≥i t·∫≠p expired
    if (!memberships || memberships.length === 0) {
      memberships = await Membership.find({
        member_id: memberObjectId,
        status: 'expired',
      })
        .populate({
          path: 'package_id',
          select: 'name price category training_sessions',
        })
        .lean();
    }

    // N·∫øu kh√¥ng c√≥ g√≥i t·∫≠p active ho·∫∑c expired n√†o
    if (!memberships || memberships.length === 0) {
      // Tr·∫£ v·ªÅ th√¥ng tin c∆° b·∫£n n·∫øu kh√¥ng c√≥ g√≥i t·∫≠p n√†o
      return {
        membership_id: 'null', 
        member_name: member.name,
        member_avatar: member.avatar || '/placeholder-avatar.jpg',
        package_id: '',
        package_name: 'Ch∆∞a ƒëƒÉng k√Ω',
        package_category: 'basic',
         status: 'null',
        days_remaining: 0,
        sessions_remaining: 0,
        total_sessions: 0,
      };
    }

     // T√¨m g√≥i t·∫≠p active tr∆∞·ªõc, n·∫øu kh√¥ng c√≥ th√¨ t√¨m g√≥i t·∫≠p expired
    let selectedMembership = memberships.find(m => m.status === 'active');
    // N·∫øu kh√¥ng c√≥ g√≥i active, t√¨m g√≥i expired
    if (!selectedMembership) {
      selectedMembership = memberships.find(m => m.status === 'expired');
    }
     if (!selectedMembership) {
      selectedMembership = memberships[0];
    }
    // T√¨m g√≥i t·∫≠p c√≥ gi√° cao nh·∫•t
    const highestPriceMembership = memberships.reduce((highest, current) => {
      const currentPrice = (current.package_id as any)?.price || 0;
      const highestPrice = (highest.package_id as any)?.price || 0;
      return currentPrice > highestPrice ? current : highest;
    }, memberships[0]);

    // T√≠nh s·ªë ng√†y c√≤n l·∫°i
    let daysRemaining = 0;
    
    if (highestPriceMembership.end_date) {
      const today = new Date();
      const endDate = new Date(highestPriceMembership.end_date);
      daysRemaining = Math.max(0, Math.ceil((endDate.getTime() - today.getTime()) / (1000 * 60 * 60 * 24)));
    }

    // T√≠nh s·ªë bu·ªïi t·∫≠p c√≤n l·∫°i
    const sessionsRemaining = highestPriceMembership.available_sessions - highestPriceMembership.used_sessions;
    const totalSessions = highestPriceMembership.available_sessions;

    // L·∫•y th√¥ng tin g√≥i t·∫≠p
    const packageInfo = highestPriceMembership.package_id as any;

    return {
       membership_id: selectedMembership._id.toString(),
      member_name: member.name,
      member_avatar: member.avatar || '/placeholder-avatar.jpg',
      package_id: packageInfo?._id?.toString() || '',
      package_name: packageInfo?.name || 'Kh√¥ng c√≥ th√¥ng tin',
      package_category: packageInfo?.category || 'basic',
      days_remaining: daysRemaining,
      sessions_remaining: sessionsRemaining,
      total_sessions: totalSessions,
      status: selectedMembership.status || 'unknown'
    };
  } catch (error) {
    console.error('Error fetching membership details:', error);
    throw new Error('Kh√¥ng th·ªÉ l·∫•y th√¥ng tin h·ªôi vi√™n');
  }
};

//T·ª± ƒë·ªông c·∫≠p nh·∫≠t c√°c g√≥i membership h·∫øt h·∫°n
export async function updateExpiredMemberships(): Promise<void> {
  try {
    const today = new Date();
    
    // T√¨m c√°c membership c√≥ end_date ƒë√£ qua m√† v·∫´n c√≥ status l√† active
    const result = await Membership.updateMany(
      {
        status: 'active',
        end_date: { $lt: today }
      },
      {
        $set: { 
          status: 'expired', 
          updated_at: new Date()
        }
      }
    );
    
    console.log(`ƒê√£ c·∫≠p nh·∫≠t ${result.modifiedCount} membership h·∫øt h·∫°n.`);
  } catch (error) {
    console.error('L·ªói khi c·∫≠p nh·∫≠t membership h·∫øt h·∫°n:', error);
  }
}

//Reset c√°c membership h·∫øt h·∫°n v·ªÅ tr·∫°ng th√°i null
export async function resetExpiredMemberships(): Promise<void> {
  try {
    const today = new Date();
    
    // T√¨m c√°c membership c√≥ end_date ƒë√£ qua m√† v·∫´n c√≥ status l√† active
    const result = await Membership.updateMany(
      {
        status: 'expired',
        end_date: { $lt: today }
      },
      {
        $set: { 
          start_date: null,
          end_date: null,
          available_sessions: 0,
          used_sessions: 0,
          last_sessions_reset: null,
          updated_at: new Date()
        }
      }
    );
    
    console.log(`ƒê√£ reset ${result.modifiedCount} membership h·∫øt h·∫°n.`);
  } catch (error) {
    console.error('L·ªói khi reset membership h·∫øt h·∫°n:', error);
  }
}


//Kh·ªüi t·∫°o c√°c c√¥ng vi·ªác ƒë∆∞·ª£c l·∫≠p l·ªãch cho membership
// export function initScheduledMembershipJobs(): void {
//   // Ch·∫°y h√†ng ng√†y l√∫c 00:10
//   cron.schedule('10 0 * * *', async () => {
//     console.log('Running scheduled job: Update expired memberships');
//     await updateExpiredMemberships();
//     // B·ªè comment d√≤ng d∆∞·ªõi n·∫øu mu·ªën reset c√°c gi√° tr·ªã c·ªßa membership h·∫øt h·∫°n
//     // await resetExpiredMemberships();
//   });
// }

export async function initScheduledMembershipJobs(): Promise<void> {
  try {
    // Ch·∫°y ngay khi app kh·ªüi ƒë·ªông
    console.log('üîÅ Ki·ªÉm tra v√† c·∫≠p nh·∫≠t membership h·∫øt h·∫°n khi kh·ªüi ƒë·ªông app...');
    await updateExpiredMemberships();

    // L√™n l·ªãch ch·∫°y h√†ng ng√†y l√∫c 00:10
    cron.schedule('10 0 * * *', async () => {
      console.log('‚è∞ Running scheduled job: Update expired memberships');
      await updateExpiredMemberships();
      // await resetExpiredMemberships(); // N·∫øu c·∫ßn reset th√™m
    });

    console.log('‚úÖ L√™n l·ªãch th√†nh c√¥ng cho job c·∫≠p nh·∫≠t membership.');
  } catch (error) {
    console.error('‚ùå L·ªói khi kh·ªüi t·∫°o job c·∫≠p nh·∫≠t membership:', error);
  }
}
//=========================================================
//admin




export default {
  getMembershipDetails,
   updateExpiredMemberships,
  resetExpiredMemberships,
  initScheduledMembershipJobs
};