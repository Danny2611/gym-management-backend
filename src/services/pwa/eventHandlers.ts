import pushNotificationService from './pushNotificationService';
import { pushConfig, renderTemplate } from '~/config/push-notification';

// Event handlers cho cÃ¡c sá»± kiá»‡n trong há»‡ thá»‘ng

// Khi appointment Ä‘Æ°á»£c táº¡o/xÃ¡c nháº­n
export const handleAppointmentConfirmed = async (appointmentId: string) => {
  try {
    const Appointment = require('~/models/Appointment');
    const appointment = await Appointment.findById(appointmentId)
      .populate('member_id', 'name email')
      .populate('trainer_id', 'name');

    if (!appointment) return;

    const template = renderTemplate(pushConfig.templates.appointment_reminder, {
      trainerName: appointment.trainer_id.name,
      time: appointment.time.start,
      date: new Intl.DateTimeFormat('vi-VN').format(appointment.date),
      location: appointment.location || 'PhÃ²ng táº­p'
    });

    await pushNotificationService.sendToUser(
      appointment.member_id._id.toString(),
      {
        title: 'âœ… Lá»‹ch háº¹n Ä‘Ã£ Ä‘Æ°á»£c xÃ¡c nháº­n',
        message: `Lá»‹ch háº¹n vá»›i PT ${appointment.trainer_id.name} Ä‘Ã£ Ä‘Æ°á»£c xÃ¡c nháº­n`,
        type: 'appointment',
        data: {
          appointmentId: appointment._id,
          status: 'confirmed'
        }
      }
    );

    console.log(`ðŸ“§ Sent appointment confirmation to ${appointment.member_id.name}`);
  } catch (error) {
    console.error('Error in handleAppointmentConfirmed:', error);
  }
};

// Khi membership Ä‘Æ°á»£c gia háº¡n
export const handleMembershipRenewed = async (membershipId: string) => {
  try {
    const Membership = require('~/models/Membership');
    const membership = await Membership.findById(membershipId)
      .populate('member_id', 'name email')
      .populate('package_id', 'name');

    if (!membership) return;

    await pushNotificationService.sendToUser(
      membership.member_id._id.toString(),
      {
        title: 'ðŸŽ‰ Gia háº¡n thÃ nh cÃ´ng',
        message: `GÃ³i ${membership.package_id.name} Ä‘Ã£ Ä‘Æ°á»£c gia háº¡n thÃ nh cÃ´ng!`,
        type: 'membership',
        data: {
          membershipId: membership._id,
          newEndDate: membership.end_date
        }
      }
    );

    console.log(`ðŸ“§ Sent membership renewal confirmation to ${membership.member_id.name}`);
  } catch (error) {
    console.error('Error in handleMembershipRenewed:', error);
  }
};

// Khi workout Ä‘Æ°á»£c hoÃ n thÃ nh
export const handleWorkoutCompleted = async (workoutId: string) => {
  try {
    const WorkoutSchedule = require('~/models/WorkoutSchedule');
    const workout = await WorkoutSchedule.findById(workoutId)
      .populate('member_id', 'name email');

    if (!workout) return;

    await pushNotificationService.sendToUser(
      workout.member_id._id.toString(),
      {
        title: 'ðŸ’ª Táº­p luyá»‡n hoÃ n thÃ nh',
        message: 'ChÃºc má»«ng báº¡n Ä‘Ã£ hoÃ n thÃ nh buá»•i táº­p hÃ´m nay!',
        type: 'workout',
        data: {
          workoutId: workout._id,
          status: 'completed'
        }
      }
    );

    console.log(`ðŸ“§ Sent workout completion notification to ${workout.member_id.name}`);
  } catch (error) {
    console.error('Error in handleWorkoutCompleted:', error);
  }
};
